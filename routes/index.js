var express = require('express');
var router = express.Router();

var glossery = [
  {terminology :"DevOps",description:"DevOps is a set of practices and cultural philosophies that aim to bridge the gap between software development (Dev) and IT operations (Ops). It promotes collaboration, communication, and integration between development and operations teams throughout the software development lifecycle.",reference:"'DevOps,' Atlassian. Available: https://www.atlassian.com/devops. "},
  {terminology :"Continuous Integration (CI)",description:"Continuous Integration (CI) is a software development practice where code changes are automatically integrated into a shared repository and verified through automated build and test processes.",reference:'Wikipedia, "Continuous Integration," Wikipedia. Available: https://en.wikipedia.org/wiki/Continuous_integration. '},
  {terminology: "Continuous Deployment (CD)",description:"An extension of continuous integration called continuous deployment (CD) involves automatically deploying code modifications to live environments after they have passed automated testing. The goal of CD is to reduce manual intervention in the deployment process, allowing for quicker and more frequent software update releases.",reference:'GitLab, "Continuous Integration," GitLab, [Online]. Available: https://about.gitlab.com/features/continuous-integration/.'},
  {terminology: "Infrastructure as Code (IaC)",description:"Using configuration files, automation tools, and code, infrastructure resources (such as virtual machines, networks, and storage) are specified and maintained. This practise is known as infrastructure as code (IaC).",reference:'HashiCorp, "What is Infrastructure as Code?," HashiCorp Resources. Available: https://www.hashicorp.com/resources/what-is-infrastructure-as-code.'},
  {terminology: "Microservices",description:"A software architectural technique known as microservices divides an application into small, independent services that may be created, deployed, and maintained independently. Each microservice concentrates on carrying out a particular business function, and they interact with one another via clearly defined APIs.",reference:'Martin Fowler, "Microservices,". Available: https://martinfowler.com/articles/microservices.html.'},
  {terminology: "Docker",description:"With the help of the open-source platform Docker, developers may package apps and their dependencies into small, portable containers. Containers make it simpler to deploy apps on any system that supports Docker because they provide a consistent environment throughout various stages of the development and deployment process.",reference:'Docker, "What is a Container?," Docker. Available: https://www.docker.com/resources/what-container/.'},
  {terminology: "Kubernetes",description:"K8s, or Kubernetes, is a popular abbreviation for this open-source container orchestration system. It automates the installation, expansion, and administration of containerized applications across host clusters.",reference:'The Kubernetes Authors, "Overview," Kubernetes. Available: https://kubernetes.io/docs/concepts/overview/.'},
  {terminology: "Version Control",description:"Developers can manage changes to their codebase over time using a technique called version control, commonly referred to as source control. It facilitates keeping track of changes, managing various code versions, collaborating with other team members, and going back to earlier states as necessary.",reference:'Atlassian, "What is Version Control?," Atlassian Git Tutorials. Available: https://www.atlassian.com/git/tutorials/what-is-version-control.'},
  {terminology: "Agile Development",description:"Software development using the agile methodology places a strong emphasis on adaptability, client collaboration, and responsiveness to changing requirements. It encourages flexible planning, regular software delivery, and ongoing development via frequent feedback loops.",reference:'Atlassian, "Agile," Atlassian. Available: https://www.atlassian.com/agile.'},
  {terminology: "Scrum",description:"Scrum is an agile methodology for organising and managing work, especially in projects involving software development. It entails segmenting activities into sprints, which are time-boxed iterations that last between two and four weeks.",reference:'Atlassian, "Scrum," Atlassian Agile, . Available: https://www.atlassian.com/agile/scrum.'},
  {terminology: "Git", description: "Git is a distributed version control system widely used for tracking changes in source code during software development. It allows multiple developers to collaborate on a project, manage different versions of files, and merge their changes efficiently. ", reference: 'Atlassian, "What is Git?," Atlassian, Date of publication or update not specified. Available: https://www.atlassian.com/git/tutorials/what-is-git.'},
  {terminology: "Puppet", description: "Puppet is an open-source configuration management tool used for automating the deployment and management of software and system configurations. It allows administrators to define desired states for resources on target systems and ensures that the systems remain in the desired state.", reference: 'Puppet, "What is Puppet?," Puppet Resources, Date of publication or update not specified. Available: https://www.puppet.com/resources/what-is-puppet/. '},
  {terminology: "Ansible", description: "Ansible is an open-source automation tool that simplifies IT orchestration, application deployment, and configuration management. It uses a simple and human-readable language (YAML) to define tasks, allowing users to easily manage and automate complex workflows.", reference: 'Red Hat, "What is Ansible?," Red Hat, Date of publication or update not specified. Available: https://www.redhat.com/en/topics/automation/what-is-ansible.'},
  {terminology: "Load Balancing", description: "Load balancing is a technique used to distribute incoming network traffic across multiple servers or resources to ensure optimal resource utilization, prevent overload, and enhance performance and availability.", reference: 'F5, "Load Balancing," F5 Services Resources, Date of publication or update not specified. Available: https://www.f5.com/services/resources/glossary/load-balancing. '},
  {terminology: "Infrastructure Monitoring", description: "Infrastructure monitoring involves the continuous tracking and analysis of various components in an IT environment, such as servers, networks, and databases. ", reference: 'SolarWinds, "What is Infrastructure Monitoring?," SolarWinds IT Monitoring, Date of publication or update not specified. Available: https://www.solarwinds.com/it-monitoring/what-is-infrastructure-monitoring.'},
  {terminology: "Scalability", description: "Scalability is the ability of a system or application to handle increasing workloads and user demands. It can be achieved by adding resources, such as servers or computing power, to accommodate higher loads without compromising performance or responsiveness.", reference: 'Amazon Web Services, "Scalability," Available: https://aws.amazon.com/architecture/builders-library/scalability/. '},
  {terminology: "Elasticity", description: "Elasticity refers to the capability of a system to automatically and dynamically scale resources up or down based on demand. It allows applications to adapt to varying workloads and ensure efficient resource utilization, especially in cloud computing environments.", reference: 'Amazon Web Services, "Elasticity," What is Cloud Computing?. Available: https://aws.amazon.com/what-is-cloud-computing/elasticity/.'},
  {terminology: "Incident Management", description: "Incident management is a process that focuses on quickly identifying, responding to, and resolving disruptions or incidents in an IT environment.", reference: 'Atlassian, "Incident Management Process," Atlassian, Date of publication or update not specified. Available: https://www.atlassian.com/incident-management/process. '},
  {terminology: "ChatOps", description: "ChatOps is a collaborative approach to DevOps that involves integrating chat platforms and bots into the development and operations workflow. It enables teams to perform actions, trigger deployments, and monitor systems through conversational interfaces, improving communication, transparency, and automation.", reference: 'GitHub, "ChatOps: A guide to getting started," GitHub Blog, April 7, 2016. Available: https://github.blog/2016-04-07-chatops-a-guide-to-getting-started/.'},
  {terminology: "Canary Deployment", description: "Canary deployment is a deployment strategy that involves gradually rolling out new software updates to a small subset of users or servers before applying changes to the entire infrastructure. ", reference: 'Google Cloud, "Canary Deployment using Kubernetes Engine," Google Cloud Architecture, Date of publication or update not specified. Available: https://cloud.google.com/architecture/canary-deployment-using-kubernetes-engine.'},
];

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Cloud Glossary' ,glossery:glossery});
});

module.exports = router;
